<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Le Blog de NokiDev</title>
    <link>https://blog-gh.noki.fr/fr/</link>
    <description>Recent content on Le Blog de NokiDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Jun 2020 01:14:20 +0200</lastBuildDate>
    
	<atom:link href="https://blog-gh.noki.fr/fr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sécuriser son installation de Traefik</title>
      <link>https://blog-gh.noki.fr/fr/posts/traefik_series/02_securing_traefik_installation/</link>
      <pubDate>Sat, 13 Jun 2020 01:14:20 +0200</pubDate>
      
      <guid>https://blog-gh.noki.fr/fr/posts/traefik_series/02_securing_traefik_installation/</guid>
      <description>Cet article n&amp;#8217;est pas traduit, j&amp;#8217;y travaille :)
 In this article we will see how to configure traefik to use https and configure middlewares for having a quite good security rank on SSLLabs. This is mandatory if you plan to exposes your services on the Internet.
 This article directly follows Using traefik for deploying your first service and will use docker-compose file definitions we used back then.
 For this article we will need a few things   A domain name</description>
    </item>
    
    <item>
      <title>Utiliser Traefik v2.2 pour auto-héberger votre 1er service.</title>
      <link>https://blog-gh.noki.fr/fr/posts/traefik_series/01_using_traefik_2.2_reverse_proxy_for_selfhosting/</link>
      <pubDate>Fri, 12 Jun 2020 20:29:46 +0200</pubDate>
      
      <guid>https://blog-gh.noki.fr/fr/posts/traefik_series/01_using_traefik_2.2_reverse_proxy_for_selfhosting/</guid>
      <description>Traefik est un reverse proxy moderne, qui s&amp;#8217;intègres avec les solutions containeurisées comme docker et kubernetes. Pour cette article, nous allons s&amp;#8217;intéresser a son intégration avec docker. Traefik, utilise le socket docker (local ou distant) pour récupérer des informations a propos des containers déployés sur le systême ainsi que les labels qui lui sont accrochés. (Vous pouvez utiliser docker inspect pour avoir une idée des informations a sa disposition).
 Cette article demande un minimum de connaissances sur les environnements containeurisés et en particulier docker.</description>
    </item>
    
  </channel>
</rss>